repos:
# STEP 1: Local formatter aggregator disabled for pre-commit (manual only)
-   repo: local
    hooks:
    -   id: run-formatters
        name: Auto-fix code formatting and style (manual)
        entry: ./run_checks.sh
        args: [formatters]
        language: system
        pass_filenames: false
        stages: [manual]

# STEP 2: Basic file checks (these don't conflict with auto-fixes)
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
    -   id: trailing-whitespace
        exclude: |
            (?x)^(
                .*/\.git/
            )$
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-added-large-files
    -   id: check-merge-conflict
    -   id: check-symlinks
    -   id: mixed-line-ending
    -   id: check-case-conflict
    -   id: check-json
    -   id: check-toml
        always_run: true

-   repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
    -   id: black
        name: black (python auto-fix)
        args: [--line-length=88]
        files: ^(mod_net_client/|modules/test_module/|tests/).*

-   repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.7
    hooks:
    -   id: ruff
        name: ruff (python auto-fix)
        args: [--fix]
        files: ^(mod_net_client/|modules/test_module/|tests/).*

-   repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
    -   id: isort
        name: isort (python auto-fix)
        args: [--profile=black]
        files: ^(mod_net_client/|modules/test_module/|tests/).*

# Rust tooling is handled through rustup and cargo directly
# Install required components:
# rustup component add rustfmt clippy
-   repo: local
    hooks:
    -   id: rustfmt
        name: rustfmt (auto-fix)
        entry: bash -c 'find . -name "*.rs" -not -path "*/target/*" -not -path "*/.git/*" -exec rustfmt --edition=2021 {} +'
        language: system
        stages: [manual]
        types: [rust]
        exclude: ^(commune-ipfs/|modules/)
        pass_filenames: false
        always_run: true

    -   id: cargo-check
        name: cargo check
        entry: bash -c 'find . -name Cargo.toml -not -path "*/target/*" -not -path "*/.git/*" -exec dirname {} \; | sort -u | while read -r dir; do echo "Checking $dir" && (cd "$dir" && cargo check --all-targets) || exit 1; done'
        language: system
        types: [rust]
        pass_filenames: false
        always_run: true
        stages: [manual]
        verbose: true

    -   id: cargo-clippy
        name: cargo clippy
        entry: bash -c 'find . -name Cargo.toml -not -path "*/target/*" -not -path "*/.git/*" -exec dirname {} \; | sort -u | while read -r dir; do echo "Linting $dir" && (cd "$dir" && cargo clippy --all-targets -- -D warnings) || exit 1; done'
        language: system
        types: [rust]
        exclude: ^(commune-ipfs/|modules/)
        pass_filenames: false
        stages: [manual]
