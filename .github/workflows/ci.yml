name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - if: contains(matrix.os, 'ubuntu')
        uses: ./.github/actions/free-disk-space
      # Faster, stable binary installer and cache on macOS
      - name: Install Nix (macOS)
        if: contains(matrix.os, 'macos')
        uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: |
            experimental-features = nix-command flakes
      - name: Enable magic Nix cache (macOS)
        if: contains(matrix.os, 'macos')
        uses: DeterminateSystems/magic-nix-cache-action@v7
      # Keep existing installer on Ubuntu
      - name: Install Nix (Ubuntu)
        if: contains(matrix.os, 'ubuntu')
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run consolidated CI via Nix apps
        run: nix run ./env-setup#ci
        timeout-minutes: 120

  run-node:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - if: contains(matrix.os, 'ubuntu')
        uses: ./.github/actions/free-disk-space
      - if: contains(matrix.os, 'ubuntu')
        uses: ./.github/actions/ubuntu-dependencies
      - if: contains(matrix.os, 'macos')
        uses: ./.github/actions/macos-dependencies
      - name: Install Nix (macOS)
        if: contains(matrix.os, 'macos')
        uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: |
            experimental-features = nix-command flakes
      - name: Enable magic Nix cache (macOS)
        if: contains(matrix.os, 'macos')
        uses: DeterminateSystems/magic-nix-cache-action@v7

      - name: Build the node individually in release mode
        run: cargo build --package mod-net-node --release
        timeout-minutes: 90

      - name: Make sure the node is producing blocks
        run: |
          ./target/release/mod-net-node --dev 2>&1 | tee out.txt &
          until curl -s '127.0.0.1:9944'; do sleep 5; done
          until cat out.txt | grep -s "Imported #2"; do sleep 5; done
        shell: bash
        timeout-minutes: 5

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/free-disk-space

      - name: Build blockchain node Docker image (blockchain-node stage)
        run: |
          docker build --target blockchain-node -t mod-net-node:ci .

      - name: Smoke test node image
        run: |
          docker run --rm mod-net-node:ci --version
        timeout-minutes: 90
