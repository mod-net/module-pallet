
services:
  # Mod-Net blockchain node
  mod-net-node:
    image: mod-net-node:nix
    container_name: mod-net-node
    ports:
      - "${EXTERNAL_CHAIN_P2P_PORT:-2101}:30333"
      - "${EXTERNAL_CHAIN_RPC_PORT:-2102}:9933"
      - "${EXTERNAL_CHAIN_WS_PORT:-2103}:9933"  # WS shares the RPC port
      - "${EXTERNAL_PROMETHEUS_PORT:-2104}:9615"
    volumes:
      - blockchain_data:/data
    command: [
      "--dev",
      "--rpc-external",
      "--rpc-cors=all",
      "--prometheus-external",
      "--base-path=/data"
    ]
    restart: "no"
    networks:
      - mod-net

  # IPFS Worker Service
  ipfs-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: python-client
    container_name: mod-net-ipfs-worker
    ports:
      - "${EXTERNAL_IPFS_WORKER_PORT:-2108}:8003"
    volumes:
      - ipfs_worker_logs:/app/logs
    environment:
      - COMMUNE_IPFS_HOST=0.0.0.0
      - COMMUNE_IPFS_PORT=8003
      - IPFS_API_URL=http://ipfs:5001
      - IPFS_GATEWAY_URL=http://ipfs:8080
      - IPFS_WORKER_API_KEY=${IPFS_WORKER_API_KEY:-dev-key}
      - SECRET_KEY=${SECRET_KEY:-dev-secret}
      - NODE_ENV=${NODE_ENV:-development}
      - DEBUG=${DEBUG:-false}
    command: ["uv", "run", "commune-ipfs"]
    depends_on:
      - ipfs
      - mod-net-node
    restart: "no"
    networks:
      - mod-net

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: mod-net-ipfs
    ports:
      - "${EXTERNAL_IPFS_API_PORT:-2105}:5001"        # API
      - "${EXTERNAL_IPFS_GATEWAY_PORT:-2106}:8080"    # Gateway
      - "${EXTERNAL_IPFS_SWARM_PORT:-2107}:4001"      # Swarm
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    # Note: sysctl tuning removed to avoid OCI runtime permission errors on hosts
    # without CAP_SYS_ADMIN or permissive kernel namespaces. Apply these at the
    # host level instead (e.g., sysctl.conf or NixOS config):
    #   net.core.rmem_max=2500000
    #   net.core.rmem_default=2500000
    #   net.core.wmem_max=2500000
    #   net.core.wmem_default=2500000
    entrypoint: ["/bin/sh", "-c"]
    command: |
      ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
      ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\", \"GET\"]' &&
      ipfs config --json Addresses.Gateway '[\"0.0.0.0:8080\"]' &&
      ipfs config --json Addresses.API '[\"0.0.0.0:5001\"]' &&
      ipfs daemon --migrate=true
    restart: "no"
    networks:
      - mod-net

  # Blockchain Explorer
  blockchain-explorer:
    build:
      context: .
      dockerfile: Dockerfile
      target: python-client
    container_name: mod-net-explorer
    ports:
      - "${EXTERNAL_BLOCKCHAIN_EXPLORER_PORT:-2109}:8081"
    volumes:
      - ./webui:/app/webui:ro
    working_dir: /app/webui
    command: ["python3", "-m", "http.server", "8081"]
    depends_on:
      - mod-net-node
    restart: "no"
    networks:
      - mod-net

  # Development Environment (Optional)
  dev-environment:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mod-net-dev
    expose:
      - 30333
      - 9933
      - 9944
    ports:
      - "2201:30333"  # Alt P2P port for dev
      - "2202:9933"   # Alt RPC port for dev
      - "2203:9944"   # Alt WS port for dev
      - "2204:9615"   # Alt Prometheus port for dev
      - "2208:8003"   # Alt IPFS Worker port for dev
    volumes:
      - .:/workspace
      - dev_cargo_cache:/usr/local/cargo/registry
      - dev_target_cache:/workspace/target
    environment:
      - RUST_LOG=debug
      - BLOCKCHAIN_RPC_URL=ws://localhost:9944  # Use local blockchain node
      - IPFS_API_URL=http://ipfs:5001
    depends_on:
      # - mod-net-node  # Disabled - use local blockchain node
      - ipfs
    profiles:
      - development
    networks:
      - mod-net
    tty: true
    stdin_open: true

volumes:
  blockchain_data:
    driver: local
  ipfs_data:
    driver: local
  ipfs_staging:
    driver: local
  ipfs_worker_logs:
    driver: local
  dev_cargo_cache:
    driver: local
  dev_target_cache:
    driver: local

networks:
  mod-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
